package client.presentation;

import java.awt.*;
import java.awt.event.*;
import java.util.*;

import javax.swing.*;
import javax.swing.Timer;
import javax.swing.border.Border;

import client.controller.Controller;

public class GameWindow extends JFrame implements MouseListener, IJuego {
	
	private static final long serialVersionUID = -5128501222928885944L;

	private JPanel mainPanel;
	private ImagePanel gameBoard;

	private JLabel F1, F2, F3, F4, F5, F6, F7, F8, F9; //TABLERO GLOBAL
	
	
	private JLabel [][] tableroGlobal =  new JLabel[3][3];
	
	private class Coordenada{
		private int x;
		private int y;
		public Coordenada(int i, int j) {
			this.x = i;
			this.y = j;
		}
		public int getx(){return this.x;}
		public int gety(){return this.y;}
	
		@Override
		public String toString(){return x+" "+y;}
	}
	
	private JLabel [][] tableroJuego = new JLabel[9][9];
	public JLabel[][] getTableroJuego() {
		return tableroJuego;
	}

	private Hashtable <JLabel, Coordenada> coordenadas = new Hashtable<JLabel, Coordenada> ();
	
	private JLabel minimapLabel;
	private JLabel ply1;
	private JLabel ply2;
	private JLabel notification;
	private JLabel ply2name;
	private JLabel ply1name;
	private JLabel player1;
	private JLabel player2;
	private JLabel globalview;
	private JLabel ultimate, tictactoe;
	private JLabel turnoPly1;
	private JLabel turnoPly2;
	private JLabel lastMove;
	private JLabel wrongMove;
	private JLabel ply1Piece, ply2Piece;
	
	int xAdjustment = 24;
	int yAdjustment = 124;
	
	public GameWindow(String self, String retador, String retado) {
		super();
		
		try {
			Controller cntrl;
			cntrl = Controller.get();
			cntrl.setJuego(this);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		this.setDefaultCloseOperation(DISPOSE_ON_CLOSE );
		this.pack();
		this.setResizable(false);
		this.setTitle("Ultimate Tic-Tac-Toe - GAME  Player " + self + ". " + retador + " vs " + retado);
		this.setSize(980, 730);
		this.setLocationRelativeTo( null );
		this.setVisible(true);

		ply1Piece = new JLabel();
		ply1Piece.setIcon(new ImageIcon(GameWindow.class.getResource("/image/x.png")));
		ply2Piece = new JLabel();
		ply2Piece.setIcon(new ImageIcon(GameWindow.class.getResource("/image/o.png")));
		
		Dimension boardSize = new Dimension(600, 600);
		mainPanel = new JPanel();
		mainPanel.setBackground(UIManager.getColor("Button.select"));
		getContentPane().add(mainPanel, BorderLayout.CENTER);
		mainPanel.setLayout(null);
		mainPanel.setPreferredSize( new Dimension(1024, 750) );
		mainPanel.addMouseListener(this);
		
		gameBoard = new ImagePanel( "src/image/board600x600.png");
		mainPanel.add(gameBoard);
		gameBoard.setLayout( new GridLayout(9, 9) );
		gameBoard.setPreferredSize( boardSize );
		gameBoard.setBounds(xAdjustment, yAdjustment, boardSize.width, boardSize.height);
	
		for (int i = 0; i < 81; i++) {
			JPanel square = new JPanel( new GridBagLayout() );
//			square.setBorder(BorderFactory.createLineBorder(Color.black, 3));
			gameBoard.add( square );
			square.setOpaque(false);
		}
		
		ultimate = new JLabel();
		ultimate.setIcon(new ImageIcon(GameWindow.class.getResource("/image/ultimate.png")));
		ultimate.setBounds(12, 28, 459, 73);
		mainPanel.add(ultimate);
		
		tictactoe = new JLabel();
		tictactoe.setIcon(new ImageIcon(GameWindow.class.getResource("/image/tictactoe.png")));
		tictactoe.setBounds(466, 42, 496, 53);
		mainPanel.add(tictactoe);
		
		player1 = new JLabel();
		player2 = new JLabel();
		if (self.equals(retador)) {
			player1.setIcon(new ImageIcon(GameWindow.class.getResource("/image/player1.png")));
			player2.setIcon(new ImageIcon(GameWindow.class.getResource("/image/player2.png")));
		} else {
			player1.setIcon(new ImageIcon(GameWindow.class.getResource("/image/player2.png")));
			player2.setIcon(new ImageIcon(GameWindow.class.getResource("/image/player1.png")));
		}
		player1.setBounds(715, 119, 65, 60);
		mainPanel.add(player1);		
		player2.setBounds(715, 191, 55, 53);
		mainPanel.add(player2);
		
		globalview = new JLabel("Vista Global");
		globalview.setForeground(new Color(0, 100, 0));
		globalview.setFont(new Font("Dialog", Font.BOLD, 24));
		globalview.setHorizontalAlignment(SwingConstants.CENTER);
		globalview.setBounds(715, 364, 192, 25);
		mainPanel.add(globalview);
		
		ply1 = new JLabel("Player 1");
		ply1.setForeground(new Color(0, 100, 0));
		ply1.setFont(new Font("Dialog", Font.BOLD, 16));
		ply1.setBounds(636, 138, 78, 30);
		mainPanel.add(ply1);
		
		ply2 = new JLabel("Player 2");
		ply2.setForeground(new Color(0, 100, 0));
		ply2.setFont(new Font("Dialog", Font.BOLD, 16));
		ply2.setBounds(636, 209, 81, 19);
		mainPanel.add(ply2);

		ply1name = new JLabel(retador);
		ply1name.setForeground(new Color(0, 100, 0));
		ply1name.setFont(new Font("Dialog", Font.BOLD, 18));
		ply1name.setHorizontalAlignment(SwingConstants.CENTER);
		ply1name.setBounds(768, 138, 106, 31);
		mainPanel.add(ply1name);
		
		ply2name = new JLabel(retado);
		ply2name.setFont(new Font("Dialog", Font.BOLD, 18));
		ply2name.setForeground(new Color(0, 100, 0));
		ply2name.setHorizontalAlignment(SwingConstants.CENTER);
		ply2name.setBounds(768, 206, 106, 31);
		mainPanel.add(ply2name);
		
		/*--------------------------TABLERO GLOBAL-----------------------------------------------*/
		F1 = new JLabel();
		F1.setBounds(667, 413, 78, 76);
		mainPanel.add(F1);
		this.tableroGlobal[0][0] = F1;
		F2 = new JLabel();
		F2.setBounds(667, 501, 78, 79);
		mainPanel.add(F2);
		this.tableroGlobal[0][1] = F2;

		F3 = new JLabel();
		F3.setBounds(667, 592, 78, 81);
		mainPanel.add(F3);
		this.tableroGlobal[0][2] = F3;

		F4 = new JLabel();
		F4.setBounds(759, 413, 78, 76);
		mainPanel.add(F4);
		this.tableroGlobal[1][0] = F4;

		F5 = new JLabel();
		F5.setBounds(759, 501, 78, 79);
		mainPanel.add(F5);
		this.tableroGlobal[1][1] = F5;

		F6 = new JLabel();
		F6.setBounds(759, 592, 78, 81);
		mainPanel.add(F6);
		this.tableroGlobal[1][2] = F6;

		F7 = new JLabel();
		F7.setBounds(846, 413, 78, 76);
		mainPanel.add(F7);
		this.tableroGlobal[2][0] = F7;

		F8 = new JLabel();
		F8.setBounds(846, 506, 78, 74);
		mainPanel.add(F8);
		this.tableroGlobal[2][1] = F8;

		F9 = new JLabel();
		F9.setBounds(846, 592, 78, 81);
		mainPanel.add(F9);
		this.tableroGlobal[2][2] = F9;
		
		minimapLabel = new JLabel();
		minimapLabel.setIcon(new ImageIcon(GameWindow.class.getResource("/image/miniboard.png")));
		minimapLabel.setBounds(644, 395, 299, 296);
		mainPanel.add(minimapLabel);
		
		turnoPly1 = new JLabel();
		turnoPly1.setIcon(new ImageIcon(GameWindow.class.getResource("/image/arrow.png")));
		turnoPly1.setBounds(869, 126, 70, 45);
		mainPanel.add(turnoPly1);
		
		turnoPly2 = new JLabel();
		turnoPly2.setIcon(new ImageIcon(GameWindow.class.getResource("/image/arrow.png")));
		turnoPly2.setBounds(868, 203, 70, 37);
		turnoPly2.setVisible(false);
		mainPanel.add(turnoPly2);
		this.setLocationRelativeTo(null);
		
		setDefaultCloseOperation (WindowConstants.DO_NOTHING_ON_CLOSE);
		
		addWindowListener(new WindowAdapter(){
			public void windowClosing(WindowEvent we){
				int eleccion = JOptionPane.showConfirmDialog(null, "Â¿Deseas abandonar la partida?");
				if ( eleccion == 0) {
					we.getWindow().dispose();
					//hilo
					CerrarJuegoThread thread = new CerrarJuegoThread();
					thread.start();
				}  
			}
		});
		
	}
	public void mousePressed(MouseEvent e){
		int x, y;
		int cT, fT, cC, fC;
		System.out.println("COMPROBAR MOVIMIENTO VALIDO");
		x = (e.getX() - xAdjustment) / 67;
		y = (e.getY() - yAdjustment) / 67;
		System.out.println(x + " " + y);
		cT = x / 3;
		fT = y / 3;
		cC = x % 3;
		fC = y % 3;
		System.out.println(cT + " " + fT + " " + cC + " " + fC);
		Controller cntrl;
		cntrl = Controller.get();
		cntrl.ponerMovimiento(cT, fT, cC, fC);		

	}

	public void mouseClicked(MouseEvent e) {
	}
	public void mouseMoved(MouseEvent e) {
	}
	public void mouseEntered(MouseEvent e){
	}
	public void mouseExited(MouseEvent e) {
	}

	@Override
	public void mouseReleased(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	public void partidaFinalizada(String email) {
		System.out.println("GANADOR : "+email);
		PartidaFinalizadaThread thread = new PartidaFinalizadaThread(email, this);
		thread.start();
	}

	public void ponerFicha(String email, int cT, int fT, int cC, int fC) {
		System.out.println("En poner ficha: " + cT + " " + fT + " " + cC + " " + fC);
		JPanel tile;
		System.out.println("Casilla: " + (cT * 3 + cC + fT * 27 + fC * 9));
		tile = (JPanel)gameBoard.getComponent(cT * 3 + cC + fT * 27 + fC * 9);
		if (email.equals(this.ply1name.getText()))
			tile.add(ply1Piece);
		else
			tile.add(ply2Piece);
		if (this.lastMove != null)
			this.lastMove.setBorder(null);
//		this.lastMove = this.tableroJuego[cT + fT * 3][cC + fC * 3];
//		this.lastMove.setBorder(BorderFactory.createLineBorder(Color.green, 3));
		this.cambiarTurno();
	}

	public void cambiarTurno() {
		if (this.turnoPly1.isVisible()) {
			this.turnoPly1.setVisible(false);
			this.turnoPly2.setVisible(true);
		} else {
			this.turnoPly1.setVisible(true);
			this.turnoPly2.setVisible(false);			
		}		
	}
	

	public void cerrar() {
		this.dispose();
	}

	public void cerrarPorAbandonoOponente() {
		JOptionPane.showMessageDialog(null, "El oponente ha abandonado la partida.");
		this.dispose();
	}

	public void tableroGanado(String email, int col, int fila) {
		System.out.println("Tablero ganado col[" + col + "] fila[" + fila + "] interfaz: " + this.ply1name.getText() + " " + email);
		if (email.equals(this.ply1name.getText()))
			this.tableroGlobal[col][fila].setIcon(new ImageIcon(GameWindow.class.getResource("/image/OSym.png")));
		else
			this.tableroGlobal[col][fila].setIcon(new ImageIcon(GameWindow.class.getResource("/image/X2.png")));
	}

	public void tableroEmpatado(int col, int fila) {
		System.out.println("Tablero empatado col[" + col + "] fila[" + fila + "]");
		this.tableroGlobal[col][fila].setIcon(new ImageIcon(GameWindow.class.getResource("/image/empate.png")));	
	}

	public void excepcionRemota() {
		JOptionPane.showMessageDialog(this,"No se obtiene respuesta del servidor", "Error de red",JOptionPane.ERROR_MESSAGE);
		this.dispose();
	}

	public void movimientoInvalido(int cT, int fT, int cC, int fC) {
		System.out.println("Pintando label");
		this.wrongMove = this.tableroJuego[cT + fT * 3][cC + fC * 3];
//		this.tableroJuego[cT + fT * 3][cC + fC * 3].setBackground(Color.red);
//		this.tableroJuego[cT + fT * 3][cC + fC * 3].setOpaque(true);
        final Timer timer = new Timer(10, null);

        ActionListener listener = new ActionListener() {
        	int gb = 254;
        	int hop = 50;
			@Override
			public void actionPerformed(ActionEvent e) {
				wrongMove.setBackground(new Color(255, gb, gb));
				wrongMove.setOpaque(true);
				gb -= hop;
				if (gb >= 255) {
					wrongMove.setOpaque(false);
					timer.stop();
				}
				if (gb <= 0) {
					hop = -50;
					gb -= hop;
				}				
			}
        };
        timer.addActionListener(listener);
        timer.start();		
		this.tableroJuego[cT + fT * 3][cC + fC * 3].setOpaque(false);
	}

	
}


class CerrarJuegoThread extends Thread {
	@Override
	public void run() {
		try {
			Controller ctrl = Controller.get();
			ctrl.cerrarPartida();
		} catch (Exception e) {
			System.out.println(e);
		}
	}
}
class PartidaFinalizadaThread extends Thread {
	String email;
	GameWindow gw;
	
	PartidaFinalizadaThread(String email, GameWindow gw) {
		this.email = email;
		this.gw = gw;
	}
	
	
	@Override
	public void run() {
		try {
			JOptionPane.showMessageDialog(null, this.email + " ha ganado la partida.");
			this.gw.dispose();
		} catch (Exception e) {
			System.out.println(e);
		}
	}
	
}

class ImagePanel extends JPanel {

	  private Image img;

	  public ImagePanel(String img) {
	    this(new ImageIcon(img).getImage());
	  }

	  public ImagePanel(String img, int width, int height) {
	    this(new ImageIcon(img).getImage(), width, height);
	  }
	  
	  public ImagePanel(Image img) {
	    this.img = img;
	    Dimension size = new Dimension(img.getWidth(null), img.getHeight(null));
	    setPreferredSize(size);
	    setMinimumSize(size);
	    setMaximumSize(size);
	    setSize(size);
	    setLayout(null);
	  }

	  public ImagePanel(Image img, int width, int height) {
	    this.img = img;
	    Dimension size = new Dimension(width, height);
	    setPreferredSize(size);
	    setMinimumSize(size);
	    setMaximumSize(size);
	    setSize(size);
	    setLayout(null);
	  }

	  public void paintComponent(Graphics g) {
	    g.drawImage(img, 0, 0, null);
	  }

	}
